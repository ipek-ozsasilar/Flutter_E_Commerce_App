# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

linter:
  rules:
    # Always explicitly declare return types for functions (e.g., int, void)
    always_declare_return_types: true

    # Required named parameters should always appear first in the parameter list
    always_put_required_named_parameters_first: true

    # Non-nullable named parameters should be marked as required
    always_require_non_null_named_parameters: true

    # Always use 'package:' imports instead of relative imports
    always_use_package_imports: true

    # Avoid using print statements; use logging packages instead
    avoid_print: true

    # Use 'final' for local variables that are never reassigned
    prefer_final_locals: true

    # Avoid having empty 'else' blocks
    avoid_empty_else: true

    # Constructors should be listed at the top of the class
    sort_constructors_first: true

    # Use 'const' for widgets and variables that never change
    prefer_const_constructors: true

    # Use super parameters for cleaner constructor delegation
    use_super_parameters: true



# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options
